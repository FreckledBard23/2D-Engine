## Simple 2D Game Engine
This is a simple engine I made just to mess around in C. Features are limited. It uses radians, not degrees. For certain engine settings, refer to ./headers/defines.h.

# Engine Basics
All game code is focused around the file ./headers/main.h. This contains the startup and loop code, as well as additional information like keyboard inputs. The file ./headers/defines.h contains helpful definitions, such as screen dimentions and frame limits.

# Game Objects
These are defined in the ./headers/object_defines.h. They consist of a transform, a sprite, and a collider. All objects are inside of the objects[] array. The object array size is determined in the same file. Objects can be created with the instantiate(struct GameObject *prefab, struct Transform *spawn_transform, int *tag) function. The tag value returns the location of the object in objects[].

# Transforms
Defined in ./headers/object_defines.h. Contains a position and rotation of every object.

# Sprites
Sprites consist of 16 rectangles. You can change this amount in ./headers/object_defines.h. Each one has relative coorinates to the object, a length and a width, a color, and a rotation.

# Colliders
All colliders are also very basic. They consist 16 (can change in same file as sprites) of circle colliders. As of right now, collisions cannot rotate objects.

# Functions that might be needed
replace(struct gameobject *prefab, struct transform *spawn_pos, int tag)
	- almost the exact same as instantiate, but you can choose the location in the objects[] array.
obj_add_force(int tag, float force_x, float force_y)
	- adds force to specific obj
draw_line(int x1, int y1, int x2, int y2, uint32_t color)
	- draws line in screen space coords
setPixel(uint32_t color, int x, int y)
	- sets screen space pixel to color
draw_box_filled(int x, int y, uint32_t color, int xside, int yside)
	- draws rectange based on center coords and size
	- screen space coordinates
draw_box_rotated(int x, int y, uint32_t color, int xside, int yside, float theta)
	- draws rectange the same way as draw_box_filled, but at an angle theta.
